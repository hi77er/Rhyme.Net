name: Deploy .NET Lambdas to AWS Managed Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: development #${{ inputs.environment }} # Adjust when clicking the "Run workflow" button in GitHub Actions portal
    permissions:
      id-token: write # For OIDC authentication
      contents: read # For checkout

    steps:
    ## Step used for debuging
    # - name: Test
    #   run: 
    #     echo "Inputs environment is ${{ inputs.environment }}"
    #     echo "ENV variable is ${{ vars.ENV }}"

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2 # Required to get changes

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws-region: ${{ vars.AWS_EU_CENTRAL_1_REGION }}

    - name: Get changed projects
      id: changed-projects
      run: |
        dict="{}"

          for project in $(find . -name '*.csproj'); do
            project_dir=$(dirname "$project")
            project_name=$(basename "$project" .csproj)

            if [[ "$project_name" == *Lambda ]]; then
              if git diff --name-only HEAD^ HEAD -- "$project_dir" | grep -q .; then
                echo "Found changes in project: $project_name at $project_dir"
                
                # Append project name and directory to dictionary
                dict=$(echo "$dict" | jq --arg key "$project_name" --arg value "$project_dir" \
                  '. + {($key): $value}')
              fi
            fi
          done

          # Ensure JSON output is single-line to avoid GitHub Actions errors
          encoded_dict=$(echo "$dict" | jq -c '.')

          # Store the final dictionary as an output variable
          echo "CHANGED_PROJECTS=$encoded_dict" >> $GITHUB_OUTPUT

    - name: Build and deploy Lambda functions
      if: steps.changed-projects.outputs.CHANGED_PROJECTS != '{}'
      run: |
        # Decode JSON dictionary before processing
        changed_projects=$(echo '${{ steps.changed-projects.outputs.CHANGED_PROJECTS }}' | jq -c '.')

        echo "$changed_projects" | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read project_name project_dir; do
          echo "Processing $project_name in directory $project_dir"

          # # Build and publish
          # dotnet publish "$project_dir" -c Release -o "$project_dir/publish" -r linux-x64 --self-contained 

          # # Zip function
          # zip -r "$project_name.zip" "$project_dir/publish"
          # echo "Lambda zipped."

          # # Deploy to AWS Lambda
          # function_name="${project_name}-${{ vars.ENV }}"
          # aws lambda update-function-code --function-name "$function_name" --zip-file fileb://"$project_name.zip"
          # echo "Lambda updated."

          # # Cleanup
          # rm "$project_name.zip"
          # echo "Zip removed."
        done
      env:
        AWS_REGION: ${{ vars.AWS_EU_CENTRAL_1_REGION }}